<script src="simpletest.js"></script>
<body></body>
<script>

  function myCopyWithin(array, startCopyPosition, startCopyIndex, endCopyIndex) {

    let length = array.length;
    let copiedArray = array.slice();
    let start = 0;
    let end = length;
    
    if(arguments.length < 2) {
    
      return array;
    
    }
  
    if(startCopyPosition >= length) {
    
      return array;
    
    }
  
    if(startCopyPosition < 0) {
    
      startCopyPosition += length;
    
    }
  
    if(startCopyIndex) {
    
      if(startCopyIndex < 0) {
      
        startCopyIndex += length;
      
      }
    
      start = startCopyIndex;
    
    }
  
    if(endCopyIndex) {
    
      if(endCopyIndex < 0) {
      
        endCopyIndex += length;
      
      }
    
      if(endCopyIndex < length) {
      
        end = endCopyIndex;
      
      }
    
    }
    
    for (let i = start; i < end; i++) {
    
      array[startCopyPosition] = copiedArray[i];
      startCopyPosition++;
    
      if(startCopyPosition === length) {
      
        break;
      
      }
    
    }
  
    return array;

  }

  tests({

    //The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.

    'Returned an array of the same length than the original array': function() {
      let arr = [1,2,3];
      let returnedArray = myCopyWithin(arr);

      eq(arr.length, returnedArray.length);
    },
    'If no arguments, return the original array': function() {
      let arr = [1,2,3];
      let returnedArray = myCopyWithin(arr);

      eq(JSON.stringify(arr), JSON.stringify(returnedArray));
    },
    'First argument : Zero-based index at which to start copying the array': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 5);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(5)), JSON.stringify(returnedArray)); //[1,2,3,4,5,1,2,3]
    },
    'If negative, target will be counted from the end': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, -3);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(-3)), JSON.stringify(returnedArray)); //[1,2,3,4,5,1,2,3]
    },
    'If target is at or greater than arr.length, nothing will be copied': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 10);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(10)), JSON.stringify(returnedArray)); //[1,2,3,4,5,6,7,8]
    },
    'Second argument : Zero-based index at which to start copying elements from': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 2, 3);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(2, 3)), JSON.stringify(returnedArray)); //[1,2,4,5,6,7,8,8]
    },
    'If negative, start will be counted from the end': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 2, -3);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(2, -3)), JSON.stringify(returnedArray)); //[1,2,6,7,8,6,7,8]
    },
    'If start is omitted, copyWithin will copy from index 0': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 6);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(6)), JSON.stringify(returnedArray)); //[1,2,3,4,5,6,1,2]
    },
    'If target is positioned after start, the copied sequence will be trimmed to fit arr.length': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 6, 3);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(6, 3)), JSON.stringify(returnedArray)); //[1,2,3,4,5,6,4,5]
    },
    'Third argument : Zero-based index at which to end copying elements from. copyWithin copies up to but not including end': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 1, 3, 6);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(1, 3, 6)), JSON.stringify(returnedArray)); //[1,4,5,6,5,6,7,8]
    },
    'If negative, end will be counted from the end': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 1, 3, -2);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(1, 3, -2)), JSON.stringify(returnedArray)); //[1,4,5,6,5,6,7,8]
    },
    'If end is omitted, copyWithin will copy until the last index (default to arr.length)': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 1, 3);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(1, 3)), JSON.stringify(returnedArray)); //[1,4,5,6,7,8,7,8]
    },
    'Pasted sequence will have the copied values even when the copy and paste region overlap': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 5, 3, 7);

      eq(JSON.stringify([1,2,3,4,5,6,7,8].copyWithin(5, 3, 7)), JSON.stringify(returnedArray)); //[1,2,3,4,5,4,5,6]
    },
    'The copyWithin method is a mutable method': function() {
      let arr = [1,2,3,4,5,6,7,8];
      let returnedArray = myCopyWithin(arr, 5, 3, 7);

      eq(JSON.stringify(arr), JSON.stringify(returnedArray)); //[1,2,3,4,5,4,5,6]
    },
    'Examples : using copyWithin': function() {
      eq(JSON.stringify([1,2,3,4,5].copyWithin(-2)), JSON.stringify(myCopyWithin([1,2,3,4,5], -2))); //[1,2,3,4,5,6,7,8]
      eq(JSON.stringify([1,2,3,4,5].copyWithin(0, 3)), JSON.stringify(myCopyWithin([1,2,3,4,5], 0, 3))); //[1,2,3,4,5,6,7,8]
      eq(JSON.stringify([1,2,3,4,5].copyWithin(0, 3, 4)), JSON.stringify(myCopyWithin([1,2,3,4,5], 0, 3, 4))); //[1,2,3,4,5,6,7,8]
      eq(JSON.stringify([1,2,3,4,5].copyWithin(-2, -3, -1)), JSON.stringify(myCopyWithin([1,2,3,4,5], -2, -3, -1))); //[1,2,3,4,5,6,7,8]
    }

  });

</script>
