<script src="simpletest.js"></script>
<body></body>
<script>

  function myIndexOf(array, seekedElement, startPosition) {

    let length = array.length;
    let startIndex = 0;

    if(arguments.length < 2) {

      return -1;

    }

    if(startPosition) {

      if(startPosition < 0) {

        startIndex = length - Math.abs(startPosition);

      }else{

        startIndex = startPosition;

      }

    }

    for (; startIndex < length; startIndex++) {

      if(array[startIndex] === seekedElement) {

        return startIndex;

      }

    }

    return -1;

  }

  tests({

    //The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.

    'indexOf should return a number': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array);

      eq(typeof(returnedValue) === 'number', true);
    },
    'indexOf should check every value in the array': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array);

      //eq(returnedValue, 3);
      eq(-1, returnedValue);
    },
    'The first argument is the element to locate in the array': function() {
      let array = [1,3,2];
      let element = 3;
      let returnedValue = myIndexOf(array, element);

      eq(1, returnedValue);
    },
    'If no arguments, indexOf returns -1': function() {
      let returnedValue = myIndexOf([1]);

      eq(-1, returnedValue);
    },
    'Return value: the first index of the element in the array': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array, 3);

      eq(1, returnedValue);
    },
    '-1 if not found': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array, 4);

      eq(-1, returnedValue);
    },
    'indexOf() compares searchElement to elements of the Array using strict equality': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array, '3');

      eq(-1, returnedValue);
    },
    'The second argument is the index to start the search at': function() {
      let array = [1,3,2];
      let returnedValue1 = myIndexOf(array, 1, 0);
      let returnedValue2 = myIndexOf(array, 1, 1);

      eq(0, returnedValue1);
      eq(-1, returnedValue2);
    },
    'If the index is greater than or equal to the array\'s length, -1 is returned, which means the array will not be searched': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array, 3, 4);

      eq(-1, returnedValue);
    },
    'If the provided index value is a negative number, it is taken as the offset from the end of the array': function() {
      let array = [1,'3',2];
      let returnedValue1 = myIndexOf(array, 1, -2);
      let returnedValue2 = myIndexOf(array, '3', -2);

      eq(-1, returnedValue1);
      eq(1, returnedValue2);
    },
    'If the provided index is 0, then the whole array will be searched': function() {
      let array = [1,'3',2];
      let returnedValue1 = myIndexOf(array, 1, 0);
      let returnedValue2 = myIndexOf(array, '3', 0);
      let returnedValue3 = myIndexOf(array, 2, 0);

      eq(0, returnedValue1);
      eq(1, returnedValue2);
      eq(2, returnedValue3);
    },
    'Default: 0 (entire array is searched)': function() {
      let array = [1,3,2];
      let returnedValue = myIndexOf(array, 2);

      eq(2, returnedValue);
    },
    'Example 1: using indexOf to locate values in an array': function() {
      var array = [2, 9, 9];

      let returnedValue1 = myIndexOf(array, 2);
      let returnedValue2 = myIndexOf(array, 7);
      let returnedValue3 = myIndexOf(array, 9, 2);
      let returnedValue4 = myIndexOf(array, 2, -1);
      let returnedValue5 = myIndexOf(array, 2, -3);

      eq(returnedValue1, 0);
      eq(returnedValue2, -1);
      eq(returnedValue3, 2);
      eq(returnedValue4, -1);
      eq(returnedValue5, 0);
    },
    'Example 2: using indexOf to find all the occurrences of an element': function() {
      let indices = [];
      let array = ['a', 'b', 'a', 'c', 'a', 'd'];
      let element = 'a';
      let idx = myIndexOf(array, element);
      
      while (idx != -1) {
        indices.push(idx);
        idx = myIndexOf(array, element, idx + 1);
      }

      eq(JSON.stringify(indices), JSON.stringify([0, 2, 4]));
    },
    'Example 3: using indexOf to find if an element exists in the array or not and updating the array': function() {
      let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];
      
      function updateVegetablesCollection (veggies, veggie) {
        if (myIndexOf(veggies, veggie) === -1) {
          veggies.push(veggie);
          return 'New veggies collection is : ' + veggies;
        } else if (myIndexOf(veggies, veggie) > -1) {
          return veggie + ' already exists in the veggies collection.';
        }
      }

      eq(updateVegetablesCollection(veggies, 'spinach'), 'New veggies collection is : potato,tomato,chillies,green-pepper,spinach');
      eq(updateVegetablesCollection(veggies, 'spinach'), 'spinach already exists in the veggies collection.');
    }
  
  });
</script>
