<script src="simpletest.js"></script>
<body></body>
<script>

  function mySlice(array, startPosition, endPosition) {
  
    let returnedArray = [];
    let length = array.length;
    let startIndex = 0;
  
    if(endPosition && endPosition <= length) {
    
      length = endPosition;
    
    }
    
    for (; startIndex < length; startIndex++) {
      
      returnedArray[startIndex] = array[startIndex];
      
    }
  
    if(startPosition) {
    
      if(startPosition < 0) {
      
        startPosition = array.length - Math.abs(startPosition);
      
      }
    
      for (let i = 0; i < startPosition; i++) {
        
        returnedArray.shift();
        
      }
    
    }
  
    return returnedArray;
  
  }

  tests({

    //The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.

    'Return value: an array': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr);

      eq(Array.isArray(result), true);
    },
    'The returned array is a shallow copy of the original one': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr);

      eq(JSON.stringify(result), JSON.stringify(arr));
    },
    'The original array will not be modified (slice does not alter the original array': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr);

      result[0] = 0;
      eq(JSON.stringify(arr), JSON.stringify([1,2,3,4,5]));
    },
    'For strings, numbers and booleans, slice copies the values into the new array': function() {
      let arr = [1,'ab c',true,false,0];
      let result = mySlice(arr);

      eq(JSON.stringify(arr), JSON.stringify(result));
    },
    'Changes to the string, number, or boolean in one array do not affect the other array': function() {
      let arr = [1,'ab c',true,false,0];
      let result = mySlice(arr);

      result[0] = 0, result[1] = 'te5t', result[2] = false, result[3] = true;
      eq(JSON.stringify(result), JSON.stringify([0,'te5t',false,true,0]));
    },
    'For object references (and not the actual object), slice copies object references into the new array': function() {
      let myHonda = { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } };
      let myCar = [myHonda, 2, 'cherry condition', 'purchased 1997'];
      let mySlicedCar = mySlice(myCar);

      eq(JSON.stringify(myCar), JSON.stringify(mySlicedCar));
    },
    'Both the original and new array refer to the same object': function() {
      let myHonda = { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } };
      let myCar = [myHonda, 2, 'cherry condition', 'purchased 1997'];
      let mySlicedCar = mySlice(myCar, 0, 2);

      eq(JSON.stringify(myCar[0]), JSON.stringify(mySlicedCar[0]));
    },
    'If a referenced object changes, the changes are visible to both the new and original arrays': function() {
      let myHonda = { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } };
      let myCar = [myHonda, 2, 'cherry condition', 'purchased 1997'];
      let mySlicedCar = mySlice(myCar, 0, 2);
      myHonda.color = 'purple'

      eq(JSON.stringify(myCar[0].color), JSON.stringify(mySlicedCar[0].color));
    },
    'If a new element is added to either array, the other array is not affected': function() {
      let arr = [1,'ab c',true,false,0];
      let result = mySlice(arr);
      arr.push(3);

      eq(JSON.stringify(result), JSON.stringify([1,'ab c',true,false,0]));
    },
    'First element (optional): the index from which to begin extraction': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, 2);

      eq(JSON.stringify(result), JSON.stringify([3,4,5]));
    },
    'A negative index can be used, indicating an offset from the end of the sequence': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, -2);

      eq(JSON.stringify(result), JSON.stringify(arr.slice(-2)));
    },
    'If begin is undefined, slice begins from the index 0': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr);

      eq(JSON.stringify(result), JSON.stringify([1,2,3,4,5]));
    },
    'If begin is greater than the index range of the sequence, an empty array is returned': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, 10);

      eq(JSON.stringify(result), JSON.stringify([]));
    },
    'Second element (optional): the index before which to end extraction; slice extracts up to but not including end': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, 0, 2);

      eq(JSON.stringify(result), JSON.stringify([1,2]));
    },
    'If end is omitted, slice extracts through the end of the sequence (arr.length)': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, 2);

      eq(JSON.stringify(result), JSON.stringify([3,4,5]));
    },
    'If end is greater than the length of the sequence, slice extracts through to the end of the sequence (arr.length)': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, 1, 10);

      eq(JSON.stringify(result), JSON.stringify([2,3,4,5]));
    },
    'Test': function() {
      let arr = [1,2,3,4,5];
      let result = mySlice(arr, -4, 4);

      eq(JSON.stringify(result), JSON.stringify(arr.slice(-4,4)));
    },
    'Example 1: Return a portion of an existing array': function() {
      let fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']
      
      eq(JSON.stringify(mySlice(fruits, 1, 3)), JSON.stringify(fruits.slice(1, 3)));
      // fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']
      // citrus contains ['Orange','Lemon']
    },
    'Example 2: Using slice': function() {
      // Using slice, create newCar from myCar.
      let myHonda = { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } };
      let myCar = [myHonda, 2, 'cherry condition', 'purchased 1997'];
      let newCar = myCar.slice(0, 2);
      let mySlicedCar = mySlice(myCar, 0, 2);

      eq(JSON.stringify(newCar), JSON.stringify(mySlicedCar));

      // Change the color of myHonda.
      myHonda.color = 'purple'

      // Display the color of myHonda referenced from both arrays.
      eq(JSON.stringify(myCar[0].color), JSON.stringify(newCar[0].color));
      eq(JSON.stringify(myCar[0].color), JSON.stringify(mySlicedCar[0].color));
    }
  
  });
</script>
