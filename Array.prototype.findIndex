<script src="simpletest.js"></script>
<body></body>
<script>

  function myFindIndex(array, callback, optionalThisObject) {

    let callbackFunction = callback;
    let length = array.length;
    
    if(Object.keys(array).length === 0) {
    
      return -1;
    
    }
  
    if(optionalThisObject) {
    
      callbackFunction = callback.bind(optionalThisObject);
    
    }
  
    for (let i = 0; i < length; i++) {
      
      if(callbackFunction(array[i], i, array)) {
      
        return i;
      
      }
    
    }
  
    return -1;
  
  }

  tests({
   
   //The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
   
   'There should be a callback function to execute on each value in the array': function() {
     let array = [1,2,3];
     let timesCallbackRan = 0;
     myFindIndex(array, function() {
       timesCallbackRan++;
     });
     eq(array.length, timesCallbackRan);
   },
   'Callback first argument: the current element being processed in the array': function() {
     let array = [1,2,3];
     let lastElement = 0;
     myFindIndex(array, function(element) {
       lastElement = element;
     });
     eq(array[array.length-1], lastElement);
   },
   'Callback second argument: the index of the current element being processed in the array': function() {
     let array = [1,2,3];
     let position = 0;
     myFindIndex(array, function(element, index) {
       position = index;
     });
     eq(array[position], array[array.length-1]);
   },
   'Callback third argument: the array that "findIndex" was called on': function() {
     let array = [1,2,3];
     let expectedArray = [];
     myFindIndex(array, function(element, index, arr) {
       expectedArray = arr;
     });
     eq(array, expectedArray);
   },
   'Optional this argument (object)': function() {
     let array = [1,2,3];
     let thisObject = {};
     myFindIndex(array, function(element, index, arr) {
       thisObject.description = this.description;
     }, {description: 'optional this object'});
     eq(thisObject.description, 'optional this object');
   },
   'A value should be returned': function() {
     let array = [1,2,3];
     let returnedValue = myFindIndex(array, function(element, index, arr) {
       return element;
     });
     eq(returnedValue != undefined, true);
   },
   'The return value should be the index of the first element in the array that passes the test': function() {
     let array = [4,6,8];
     let returnedIndex = myFindIndex(array, function(element, index, arr) {
       return element > 5;
     });
     eq(returnedIndex, 1);
   },
   'Otherwise, -1 is returned': function() {
     let array = [4,6,8];
     let returnedValue = myFindIndex(array, function(element, index, arr) {
       element > 10;
     });
     eq(returnedValue, -1);
   },
   'The callback is executed until it finds an index of the array where callback returns a truthy value, in which case it immediately returns the element\'s index': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     let returnedIndex = myFindIndex(array, function(element, index, arr) {
       timesCallbackRan++;
       return element > 5;
     });
     eq(returnedIndex, 1);
     eq(timesCallbackRan, 2);
   },
   'If the array\'s length is 0, findIndex returns -1': function() {
     let array = [];
     let returnedIndex = myFindIndex(array, function(element, index, arr) {
       return element > 5;
     });
     eq(returnedIndex, -1);
   },
   'Callback is invoked for every index of the array, not just those with assigned values': function() {
     let array = [,undefined,null];
     let timesCallbackRan = 0;
     myFindIndex(array, function() {
       timesCallbackRan++;
     });
     eq(array.length, timesCallbackRan);
   },
   'Callback will not visit any elements appended to the array after the call to "findIndex" begins': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     myFindIndex(array, function(element, index, arr) {
       if(array.length < 20) {
         arr.push(element);
       }
       timesCallbackRan++;
     });
     eq(3, timesCallbackRan);
   },
   'If an existing, unvisited element of the array is changed by callback, its value passed to the callback will be the value at the time "findIndex" visits that element\'s index': function() {
     let array = [4,6,8];
     let returnedIndex = myFindIndex(array, function(element, index, arr) {
       arr[2]++;
       return element >= 10;
     });
     eq(returnedIndex, [4,6,8].findIndex(function(el, i, passedArr) {passedArr[2]++; return el >= 10;}));
     eq(returnedIndex, 2);
   },
   'Elements that are deleted are still visited': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     myFindIndex(array, function(element, index, arr) {
       arr.pop();
       timesCallbackRan++;
     });
     eq(3, timesCallbackRan);
   }
 
  });
</script>
