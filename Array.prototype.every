<script src="simpletest.js"></script>
<body></body>
<script>

  function myEvery(array, callback, optionalThisObject) {
    
    let callbackFunction = callback;
    let length = array.length;
    
    if(Object.keys(array).length === 0) {
    
      return true;
    
    }
  
    if(optionalThisObject) {
    
      callbackFunction = callback.bind(optionalThisObject);
    
    }
  
    for (let i = 0; i < length; i++) {
    
      if(Object.keys(array)[i]) {
      
        if(!callbackFunction(array[i], i, array)) {
        
          return false;
        
        }
      
      }
    
    }
  
    return true;
  
  }

  tests({
   
   //The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.
   
   'There should be a callback function running for each element in the array': function() {
     let array = [1,2,3];
     let timesCallbackRan = 0;
     myEvery(array, function() {
       timesCallbackRan++;
       return true;
     });
     eq(array.length, timesCallbackRan);
   },
   'Callback first argument: the current element being processed in the array': function() {
     let array = [1,2,3];
     let lastElement = 0;
     myEvery(array, function(element) {
       lastElement = element;
       return true;
     });
     eq(array[array.length-1], lastElement);
   },
   'Callback second argument: the index of the current element being processed in the array': function() {
     let array = [1,2,3];
     let position = 0;
     myEvery(array, function(element, index) {
       position = index;
       return true;
     });
     eq(array[position], array[array.length-1]);
   },
   'Callback third argument: the array that "every" was called on': function() {
     let array = [1,2,3];
     let expectedArray = [];
     myEvery(array, function(element, index, arr) {
       expectedArray = arr;
     });
     eq(array, expectedArray);
   },
   'Optional this argument (object)': function() {
     let array = [1,2,3];
     let thisObject = {};
     myEvery(array, function(element, index, arr) {
       thisObject.description = this.description;
     }, {description: 'optional this object'});
     eq(thisObject.description, 'optional this object');
   },
   'A boolean value should be returned': function() {
     let array = [1,2,3];
     let returnedValue = myEvery(array, function(element, index, arr) {
       return element;
     });
     eq(typeof returnedValue === "boolean", true);
   },
   'The every method executes the provided callback function once for each element present in the array until it finds the one where callback returns a falsy value': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     let returnedValue = myEvery(array, function(element, index, arr) {
       timesCallbackRan++;
       return element > 5;
     });
     eq(timesCallbackRan, 1);
   },
   'If such an element is found, the every method immediately returns false': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     let returnedValue = myEvery(array, function(element, index, arr) {
       timesCallbackRan++;
       return element > 5;
     });
     eq(returnedValue, false);
   },
   'Otherwise, if callback returns a truthy value for all elements, every returns true': function() {
     let array = [4,6,8];
     let returnedValue = myEvery(array, function(element, index, arr) {
       return element < 10;
     });
     eq(returnedValue, true);
   },
   'Calling this method on an empty array will return true for any condition': function() {
     let array = [];
     let returnedValue = myEvery(array, function(element, index, arr) {
       array.push(5);
       return element < 4;
     });
     eq(returnedValue, true);
   },
   'Callback is not invoked for indexes which have never been assigned values': function() {
     let array = [,,,undefined,null];
     let timesCallbackRan = 0;
     myEvery(array, function() {
       timesCallbackRan++;
       return true;
     });
     eq(2, timesCallbackRan);
   },
   'every does not mutate the array on which it is called': function() {
     let array = [1,2,3];
     let arrayInFunction;
     myEvery(array, function(el, i, arr) {
       arrayInFunction = arr;
       return true;
     });
     eq(array, arrayInFunction);
   },
   'The range of elements processed by every is set before the first invocation of callback. Therefore, callback will not run on elements that are appended to the array after the call to every begins': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     myEvery(array, function(element, index, arr) {
       if(array.length < 20) {
         arr.push(element);
       }
       timesCallbackRan++;
       return true;
     });
     eq(3, timesCallbackRan);
   },
   'Even if newly appended elements return a falsy value, the "every" function could still return true as they are not evaluated': function() {
     let array = [4,6,8];
     let returnedValue = myEvery(array, function(element, index, arr) {
       if(array.length < 20) {
         arr.push(20);
       }
       return element < 20;
     });
     eq(returnedValue, true);
   },
   'If existing elements of the array are changed by callback, their value as passed to callback will be the value at the time every visits them': function() {
     let array = [4,6,8];
     let returnedValue = myEvery(array, function(element, index, arr) {
       arr[2]++;
       return element < 10;
     });
     eq(returnedValue, [4,6,8].every(function(el, i, passedArr) {passedArr[2]++; return el < 10;}));
     eq(returnedValue, false);
   },
   'Elements that are deleted are not visited': function() {
     let array = [4,6,8];
     let timesCallbackRan = 0;
     myEvery(array, function(element, index, arr) {
       arr.pop();
       timesCallbackRan++;
       return element < 10;
     });
     eq(2, timesCallbackRan);
   },
   '"Every" might return true even if deleted elements would have returned a falsy value': function() {
     let array = [4,6,8];
     let returnedValue  = myEvery(array, function(element, index, arr) {
       arr.pop();
       return element < 7;
     });
     eq(returnedValue, true);
   }
 
  });
</script>
