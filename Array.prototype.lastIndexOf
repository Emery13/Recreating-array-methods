<script src="simpletest.js"></script>
<body></body>
<script>

  function myLastIndexOf(array, seekedElement, startingPosition) {

    let length = array.length;
    let startingIndex = array.length-1;
    
    if(arguments.length < 2) {
    
      return -1;
    
    }

    if(startingPosition) {
    
      if(startingPosition > length) {
      
        startingIndex = length;
      
      }else if(startingPosition < 0) {
      
        startingIndex = length - Math.abs(startingPosition);
      
      }else{
      
        startingIndex = startingPosition;
      
      }
    
    }

    for (; startingIndex > -1; startingIndex--) {
    
      if(array[startingIndex] === seekedElement) {
      
        return startingIndex;
      
      }
    
    }

    return -1;

  }

  tests({

    //The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.

    'lastIndexOf should return a number': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array);

      eq(typeof(returnedValue) === 'number', true);
    },
    'LastIndexOf should check every value in the array': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array);

      //eq(returnedValue, 0);
      eq(-1, returnedValue);
    },
    'The first argument is the element to locate in the array': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array, 3);

      eq(1, returnedValue);
    },
    'If no arguments, indexOf returns -1': function() {
      let returnedValue = myLastIndexOf([1]);

      eq(-1, returnedValue);
    },
    'Return value: the last index of the element in the array': function() {
      let array = [3,3,2];
      let returnedValue = myLastIndexOf(array, 3);

      eq(1, returnedValue);
    },
    '-1 if not found': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array, 4);

      eq(-1, returnedValue);
    },
    'LastIndexOf() compares searchElement to elements of the Array using strict equality': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array, '3');

      eq(-1, returnedValue);
    },
    'The second argument is the index to start searching backward': function() {
      let array = [8,4,5,1,3];
      let returnedValue1 = myLastIndexOf(array, 1, 4);
      let returnedValue2 = myLastIndexOf(array, 1, 2);

      eq(3, returnedValue1);
      eq(-1, returnedValue2);
    },
    'If the index is greater than or equal to the array\'s length, the whole array will be searched': function() {
      let array = [1,3,2];
      let returnedValue = myLastIndexOf(array, 3, 4);

      eq(1, returnedValue);
    },
    'If the provided index value is a negative number, it is taken as the offset from the end of the array': function() {
      let array = ['1','3','1'];
      let returnedValue1 = myLastIndexOf(array, '1', -1);
      let returnedValue2 = myLastIndexOf(array, '1', -2);

      eq(2, returnedValue1);
      eq(0, returnedValue2);
    },
    'If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched': function() {
      let array = ['1','3','1'];
      let returnedValue3 = myLastIndexOf(array, '1', -4);

      eq(-1, returnedValue3);
    },
    'Default: arr.length - 1 (entire array is searched)': function() {
      let array = [2,3,2];
      let returnedValue = myLastIndexOf(array, 2);

      eq(2, returnedValue);
    },
    'Example 1: Using lastIndexOf': function() {
      let numbers = [2, 5, 9, 2];

      eq(myLastIndexOf(numbers, 2), 3);
      eq(myLastIndexOf(numbers, 7), -1);
      eq(myLastIndexOf(numbers, 2, 3), 3);
      eq(myLastIndexOf(numbers, 2, 2), 0);
      eq(myLastIndexOf(numbers, 2, -2), 0);
      eq(myLastIndexOf(numbers, 2, -1), 3);
    },
    'Example 2: Finding all the occurrences of an element': function() {
      let indices = [];
      let array = ['a', 'b', 'a', 'c', 'a', 'd'];
      let element = 'a';
      let idx = myLastIndexOf(array, element);
      while (idx != -1) {
        indices.push(idx);
        idx = (idx > 0 ? myLastIndexOf(array, element, idx - 1) : -1);
      }

      eq(JSON.stringify(indices), JSON.stringify([4, 2, 0]));
    }
  
  });
</script>
